========================================================================================Docker Theory================================================================================================

Docker:   opensource platform for developing,shipping & running applications.
-------                                  or
          platform which packages an application & all its dependencies together in the form of containers.

Architecture:
-----------
                                   App & Dependencies   App & Dependencies
                                     -----Container          Container----
                                             |               |
                                          -----Docker Engine -----  (manages containers)
                                                    |
                                         ---Host Operating System-- (Windows/linux/MacOs - in our comp we can use MySQL,java, python by installing those in our host os, problem occurs when we want to run
                                                                     two same apps or s/w in one os(ex: mysqlv.8 & mysqlv.11 or java8 & java11)), so two-run multiple s/w we can solve this by virtualization.
                                                    |
                                             ----Hardware----   (ram, rom, motherboard, SSD,..etc our hardward)

Virtualization(Virtual machine): (virtualization in our host computer)
    In our host computer only we can install multiple os(by partitioning the memory) to run different versions of same s/w in multiple os that we have installed in our same host computer. This is called
virtualization. But installing a new os every time in the same host computer consumes a lot of space/memory(because it divides the ram & harddisk for each os & uses it). so it not recommended approach
when we want to run/use multiple softwares in the limited storage. So Docker solves this issue.
    It Helps to run multiple apps or s/w & packages our apps .so for that we need install Docker in our computer so it will provide Docker Engine.

Docker Engine:
  It will manages/maintains our containers.

Container:
    So it is independent & isolated environment u can run diff diff s/w & apps in each container
    ex:
        1st container - use java v8  & app
        2nd container - use java v11  & app
      ...etc
so we can create as many as containers, we can package our apps & it dependencies together in it & then we can supply to different system/hardware & also we can use it.

Dockerfile, Image & Container:
-----------------------------
Dockerfile:
  text document which contains all the commands that a user can call on the command line to assemble an image.(don't need to hit each command in cmd, it will take each cmnd from docker file & runs to build image)

Docker Image:
  Template to create docker container.
    ex: class is blueprint/template used to create many objects & use it. class(template) already has everything(attr, behaviours) what to do when the object is created.
  
Docker Container:
  Runing instance of the docker image, Container hold entire package to run application.

                                                         build                              run
                                      Dockerfile   --------------->  Docker Image -----------------------------> Docker Container

                                will have all commands           we can create a container                    container created our s/w
                                to assemble image while we       from this image by running it                 app is running here
                                building.                               

=====================================================================================Docker Installtion & Setup=========================================================================================
- Google search for  "install Docker" open the first official site(docs.docker.com)
- site -> install -> click on "Docker Desktop for Windows"( .exe file / installer file)
- system requirements 
    we can install docker in two ways using  WSL 2 backend, hyperV backend or windows container
    above are virtualization concept. To use docker we need one among above virtualization
    WSL 2 Backend (widely used):
      - Windows 10 or 11 with 64 bit
      - 4gb ram
      - BIOS level hardware virtualization support must be enabled in BIOS Settings
        To check:
          -> open Task Manager -> Performance -> Virtualization: Enabled (below u can see in small, look carefully)
- While installing first time WSL/docker ask username & password give it
- Enable WSL 2 feature on Windows
   WSL(windows subsystem for linux):
      so we use linux in windows with the help of WSL
- Install WSL: (official site https://learn.microsoft.com/en-us/windows/wsl/install)
    ->Open CMD - enter below #Commands
       wsl --install         (it will install ubuntu os)
- Install Docker Desktop (which we downloaded earlier)
- Restart System
- Open Installed Docker Desktop
    then it will start running -> click next, next, ok
- Check Docker installed or not
   ->open cmd & enter
      #Commands
      docker -v
- To run first image to check docker installed perfectly or not
    ->open cmd & enter
      #Commands
      docker images           (shows zero, because no images currently available in local)
      docker run hello-world  (when u run this image, it is not there in locally so it will pull from docker hub & then it will run)
      docker images           (shows hello-world image which we run & created recently)
      ex:
	      REPOSITORY                 TAG             IMAGE ID       CREATED             SIZE
	      hello-world                latest          c6415d97a3f0   About an hour ago   13.3kB

- we can downloaded above Docker image from dockerhub.com
  many images available in docukerhub so we pull it in our system & we can use it by running it
  we can also create new image push to dockerhub so others also can pull our image & run our code or app/image


===================================================================================== Basic Commands ========================================================================================================
- Install Terminal(PowerShell) from Microsoft Store & restart (mostly recommended or we can use another cmd also)
#Commands
docker --version
docker -v

docker images 					(to see all available/running images in our local)
docker ps     					(to see running containers)
docker pull <image>
      						(visit dockerhub.com will have many images I am taking the hello-world image to pull)
  docker pull hello-world
     			 (if u get an error like docker daemon is not running check docker desktop by opening it is running or not, then try to pull again)

  docker pull openjdk
  docker images          (lists all local available/pulled images remote docker hub)
  docker pull openjdk18  (we can also install two different versions of same s/w in system,  u can visit docker hub -> shared tag we can different &legacy versions as well)
  docker images          (now u can see two OpenJDK s/w available in same os)

docker search <image_id>
  docker search nginx
  docker search MySQL   		(gives info about that images)

docker run <image_id>   		(it will create container & then runs the image in it)
  docker run python     		(image runned but can't see anything now, to see the status of image running follow below commands)
  docker ps             		(shows currently running containers  - shows nothing because it already runned & also existed in seconds)
  docker ps -a          		(shows all containers - currently running & created old containers also)

  docker run --env MYSQL_ROOT_PASSWORD 	(like this similarly check in net & use , so we can also pass env variables if particular s/w requires to run)
  docker run -e MYSQL_ROOT_PASSWORD 

  docker run --detach   		(it is one option to run the container in detach mode means run in background)
  docker run -d   

docker run --name <give_name_for_container> -d <image_id>
  docker run --name pythonContainer -d 3adcsddssdd  		(--name is to give customname to container)
  docker ps              					(shows nothing, becoz image already runner & stopped)   
  docker ps -a           					(now u can see name column also where we can see given name for container)

docker run --name <give_name_for_container> -it -d <image_id/imagerepo_name>   (it means interactive mode to use python)
  docker run --name pythonContainer -it -d 3adcsddssdd
  docker ps              			(shows python container, it does not stopped & status will up)   

docker exec -it <container_id> <command_name>   (need to enter the name which commands u want to )
  docker exec -it  8efdsdcsjh65 python          (container id means container which is running python image & specify name which python)
  >>>                                           (opens python environment & we can use python)
    print("hello world")
 exit()                                         (to come out of python container)

docker inspect <container_id>			  (total info about image/ container)
docker ps				          (to check running containers  ex: show python container)
docker images					  (list all images & ex: will use, run now java image from listed images)
docker run --name javaContainer -it -d openjdk
docker ps					  (now shows containers images_id or name ex: python, java containers)
docker exec -it javaContainer jshell              (when we do docker ps u will see "command" coloum ex: jshell, python we can exec with that )
>>>
   system.out.println("Hello World");
/exit						  (to exit from jshelljava container)

                                                   ---------mysqldb--------
docker pull mysql
docker images					                  	(shows mysql images)
docker run --name mysqlDb -e MYSQL_ROOT_PASSWORD=root -d mysql
docker ps								(will see ex:mysql,python,java current running mysql also)
docker inspect mysqlDb							(all details of mysql)
cls									(to clear console)
docker exec -it mysqlDb bash						(we can exec with container_id or created container_name)
mysql -p                                                                (do enter & type "root" as password)
mysql>>>
	show databases
	create myDb
	use myDb
	exit								(to exit from mysql cli)
exit									(to exit form mysql container)

                                               ----------nginx--------------
docker pull nginx
docker images						(will display ngnix image_id,reponame)
docker run --name ngnixServer -d -p 8080:80 ngnix	(local host 80 port should redirect/use/expose to 8080 port in container  )   
					   <image_name/id>
docker ps						(will see nginx container running & we can see ports)
>>>open browser & hit below url
 localhost:8080						(will static nginx welcom page)

					      --------------apache----------
docker pull httpd
docker images
docker run --name httpdServer -d -p 8081:80 httpd
docker ps
>>> open browser & hit below url
localhost:8081					 	(will see default welcome text)

docker stop <container_id / name>
ex: docker stop pythonContainer
docker ps						(u will wont see python container in list of containers)
docker ps -a						(this command shows prev running containers also along with current)
docker rm <container_id>				(to remove stopped containers entirely from "docker ps -a" also)
docker rm <cont_id1>  <cont_id2>  <cont_id3>            (to remove multiple stopped containers)
docker stop <cont_id1> <cont_id2>	

docker images
docker rmi <image_id/name>				(to remove images also)
ex: docker rmi openjdk					( we can specify version at end like ":18" if not removed )

docker images prune					(will remove all unused images)

docker ps						(ex: shows pythonContainer running)
docker stop pythonContainer				(python container stopped)
docker ps						(shows nothing)
docker restart <container_id>				(to restart the stopped container ex: like pythonContainer)
docker restart pythonContainer
docker ps						(now show pythonContainer because it is started & running)

docker login                                            (login to dockerhub ex: to push locally created images to hub)

docker commit						(create & save the edited container in local)

docker push						(to push local docker image to remote docker repo/hub)

docker network						(to give details about network in cluster)

docker copy						(copy files from local to dockerhub & viseverca)

docker logs <container_id>				(to check logs)

docker volume						(to create volume so docker container used to store data)

docker logout						(logout from docker hub)

---------------------------------------------- Creating images for our projects-----------------------------------

								------ubuntu image------
-> create folder in local for image
   ex: ubuntu-image (folder)

#commands
cd ubuntu-image
code .								(opens vscode from current path/directory)

-> create "Dockefile" file & install docker extension in vscode for extra suggestions & restart vs
Dockerfile 
>>>
	From ubuntu
	MAINTAINER kranthi
	RUN apt update
	CMD ["echo","this is my first image"]

 explanation: we are using "ubutu" as base image & I am maintaining it then build that image(Run) & after execute commands

-> Open Terminal

#commands
docker build -t myubuntuimage .
docker images 						(we will see "myubuntuimage" image in list)
docker run --name myUbuntuContainer myubuntuimage
				    <image_name/repo>
>>>
   this is my first ubuntu image			(directly displays echo message after we run the container)

-> Explanation Dockerfile 

	# this base image
	From ubuntu
	# author name
	MAINTAINER kranthi
	# update command
	RUN apt update
	# startup executable command
	CMD ["echo","this is my first image"]

							----------Java project & image --------------

-> open Terminal	

#commands
docker ps
docker stop <container_id>			(stop any running container just for clean understanding)

cd ..						(come outside of earlier ubuntu folder directory)
mkdir java-project					
ls						("java-project" folder is created)
cd java-project
code .

-> create sample hello.java file inside java-project folder

Hello.java
class Hello{
	public static void main(String[] args){
		System.out.println("Hello World.....java started");
	}
}

-> create Dockerfile file
Dockerfile   (for java project)
>>>
	FROM openjdk:11
	WORKDIR /usr/src/myapp
	COPY .	/usr/src/myapp/
	RUN javac Hello.java
	CMD ["java","Hello"]

-explanation: 	WORKDIR in docker we will create
	     	COPY .(current local directory to inside docker directory)
		RUN (will compile mentioned java file)
		CMD (will execute "java Hello" command & prints output)

Dockerfile   (for python project)
>>>
	FROM python
	WORKDIR /usr/src/myapp
	COPY .	/usr/src/myapp/
	CMD ["python3","hello.py"]

-> Build the image so open terminal
#commands
docker build -t myjavaimage .			(-t means tag name - image name for created image)
docker images					(will see created image "myjavaimage")
docker run --name javaProject myjavaimage	(run the image so container starts & prints output from hello.java file)

						-------------SpringBoot & image----------

-> Create sample spring project & import in sts/eclipse
	-write sample controller, service code to display output while we hit in browser
	-application.properties:
		server.port=9595
	-run the project from sts & test in browser by hitting api

-> Create jar files
	-main executable file in sprinboot & need to use/copy this jar in image creation path
	-jar creations:
        	gradle -> task -> build -> build(double tap) 	(may be for gradle or other ide projects to create jars for projects)
	   			 or
		Navigate to project explorer leftside in IDE
		Build -> lib -> .jar   
				 or
		IDE -> project explorer -> Run as -> Maven Clean & Maven Install  
									or
						     Maven Build -> In Goal : clean install or package -> Run
				or
                open cmd in pom.xml directory
		#commands
			mvn clean install -DskipTests
			mvn clean package -DskipTests

	-jar generated in target folder in project	
               
        -Test jar in local
		open jar folder location -> open cmd from jar directory
		#commands
			java jar .\DockerTest-0.0.1-SNAPSHOT.jar
		will see output -> "Application started"

-> Deloy Created JAR

-> Open CMD
   #commands
	ls
	mkdir springboot-project
	cd springboot-project
	code .				(opens vscode)

   -copy created jars into newly created folder "springboot-project"  & create Dockerfile in that folder
                                      or
   -Directly create Dockerfile in project only in pom.xml/root diretory
  
-> create Dockerfile for building image
Dockerfile
>>>
	FROM openjdk
        # FROM openjdk:17-jdk-alpine
        # FROM openjdk:11

        #Set a label to identify the maintainers of the image
        LABEL maintainers = "kranthikumar.net"  

	#Sets default directory / create parent directory in remote where below operations from this dir (optional)
	WORKDIR /usr/src/myapp
	# WORKDIR /usr/src/app
        # WORKDIR /app

        #copy files & dir from the local into remote/image & doesn't attempt to extract or process archives (use one COPY or ADD)
	# COPY . /usr/src/myapp/
        COPY ./target/DockerTest-0.0.1-SNAPSHOT.jar /usr/src/myapp/
        # COPY ./target/DockerTest-0.0.1-SNAPSHOT.jar  spring-backend-app.jar

        #additonal things copy local files & dir,also downloads files from remote URLs & extract archives(tar, zip) into the image (use one COPY or ADD)
        # ADD target/DockerTest-0.0.1-SNAPSHOT.jar  spring-backend-app.jar
        
        ENTRYPOINT ["java", "-jar","spring-backend-app.jar"]
	# CMD ["java","-jar","DockerTest-0.0.1-SNAPSHOT.jar"]

 	#fixed manin command & additional args will be passed to that main command directly(to app.jar itself) not while running container.
        ENTRYPOINT ["java", "-jar","spring-backend-app.jar"]

        #provides default args that can be overridden at runtime if want(ex: docker run my-app overridden-argument)
        #additional args to main command(to java -jar app.jar) while running container in terminal.
	# CMD ["java","-jar","DockerTest-0.0.1-SNAPSHOT.jar", "default-argument"]

        #Not mandatory, for clear documenting, others understanding we use it. any how we need to expose port while running "-p" eventhough using here aswell
	EXPOSE 9595

                           or

        ARG JAR_FILE = target/*.jar

-> Build the image from/using Dockerfile & then run it
  #commands
	docker build -t bootimage .                                     (-t tag name, giving name to image)
	docker images							("bootimage" image is created after successfull build)

	docker run --name bootProject -it -p 9595:9595 -d bootimage	(need to expose port while running or else wont see output in 9595 port in browser)
			<container_name>    <image_name>
        # docker run -it -p 9595:9595 -d <imag-name>			(-d detached mode, still run in background by exist from cmnd line or else we cant enter any commnd)
									(-t interactive mode, can access/run untill we stop container or else will start & stop immdtly)

	docker ps							(can see bootimage container is running)

	docker logs <container_name/id>
	ex: docker logs bootProject

-> Open localhost:9595
	-output is showing
	-application is running inside docker container(docker ps) not in host operating system.

---------------- Dockerfile with "ARG"--------------

- 'ARG' instruction allows to define variables during 'docker build' process
- i have java application jar "my-app-1.0.jar".
- 'JAVA_VERSION' arg/variable in Dockerfile will be overridden during the cmnd build process using the '--build-arg' flag
-  In real world scenario, complex usecased of 'ARG', such as dynamically downloading resoures, setting env variables or defining paths without modifying Dockerfile everytime.
- 'ARG' allows you to pass variables into the Docker build context & customizing aspects of the image without modifying the Dockerfile itself.


>>> Dockerfile

	FROM openjdk:11

	# Define an ARG to specify the version of the JAR (instead default give other name ex: "my-app-0.1")
	ARG JAR_VERSION=default 

	WORKDIR /usr/src/app

	# Copy the JAR file into the image
	COPY target/myapp-$JAR_VERSION.jar myapp.jar

	# Set the entry point command
	ENTRYPOINT ["java", "-jar", "myapp.jar"]

#Commands
	docker build --build-arg JAR_VERSION=1.0 -t my-java-app .
	docker run my-java-app
==========================
Final SampleSpringBoot Dockerfile:
>>>>>>>>>>>>>>
	FROM openjdk:17-jdk-alpine
	LABEL maintainers = "Kranthi Kumar"  
	WORKDIR /usr/src/myapp
	COPY ./target/demo-springboot-0.0.1-SNAPSHOT.jar /usr/src/myapp/
	# COPY ./target/demo-springboot-0.0.1-SNAPSHOT.jar  demo-springboot-app.jar
	ENTRYPOINT ["java", "-jar","demo-springboot-0.0.1-SNAPSHOT.jar"]
	EXPOSE 9595

#commands 
#docker build -t springboot-image .
#docker images
#docker run --name springBootProject -it -p 8080:9595 -d springboot-image
#docker stop springBootProject
#docker rm springBootProject

==========================
with SampleSpringBoot docker-compose.yml:
>>>>>>>>>>>>>>
version: '3'
services:
  springboot-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: springboot-image
    container_name: springBootProject
    ports:
      - "9595:8080"
      
 #container_port:host_port 


*imp points:
 #When using 
 # -the docker run command,correct order for port mapping is -p hostPort:containerPort.
 # -However,in docker-compose.yml file, the order is reversed, specifying containerPort:hostPort.

-------------------------------------------------------------------React & Image------------------------------------------
-> Create "react-app" folder & open cmd from that location
-> Create sample react project for deployment
	#commands
	npx create-react-app myapp
	cd myapp
	code .				(edit the react app then will proceed for deployment)
	npm start
-> open Docker desktop in laptop will take sometime to open becoz it will run
-> open cmd

#commands
docker ps 				(check any running containers)
docker ps -a				(check did we ran any container)
docker images
docker rmi <image_id>
docker rmi <intials> <intials>		(intials means first two letters of image/container id - multiple images we are removing)
ex: docker rmi 8f hb			(removing any existing images for clear understanding)
docker images				(now shows nothing after removing all images)

-> Create files
	Dockerfile.dev			(for development)
	Dockerfile			(for production , will serve prod build using nginx)


	



		
	


  

